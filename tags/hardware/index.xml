<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hardware on Evert Heylen</title><link>https://evertheylen.eu/tags/hardware/</link><description>Recent content in Hardware on Evert Heylen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 11 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://evertheylen.eu/tags/hardware/index.xml" rel="self" type="application/rss+xml"/><item><title>My Desktop+Tablet Development Setup</title><link>https://evertheylen.eu/p/my-desktop-tablet-development-setup/</link><pubDate>Sun, 11 Feb 2024 00:00:00 +0000</pubDate><guid>https://evertheylen.eu/p/my-desktop-tablet-development-setup/</guid><description>&lt;img src="https://evertheylen.eu/p/my-desktop-tablet-development-setup/tablet_with_desktop.jpg" alt="Featured image of post My Desktop+Tablet Development Setup" /&gt;&lt;h1 id="the-problem"&gt;The problem
&lt;/h1&gt;&lt;p&gt;My requirements are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My main development environment has to be Linux. (Not just WSL, I want a proper Linux desktop environment.)&lt;/li&gt;
&lt;li&gt;I like to sketch stuff and draw diagrams. Paper works, but it gets disorganized really quickly. A digital device allows me to keep my notes organized and you can have an infinite canvas with nice colors and edit history. (Note: I don’t think there are good apps like this on Linux.)&lt;/li&gt;
&lt;li&gt;I want to build my own desktop. You can get a lot more performance for your money, and I can hand-pick each component to my liking (e.g. a good CPU, a mid-tier GPU, stellar Linux support).&lt;/li&gt;
&lt;li&gt;While I spend most of my time working from home, I do have to work in other places sometimes. I don’t want to maintain duplicate environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Requirement 2 suggests a tablet, 3 suggests a desktop, and 4 suggests a laptop. A windows laptop-tablet hybrid may be a compromise solution but I tried it and did not like it &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="the-solution"&gt;The solution
&lt;/h1&gt;&lt;p&gt;I have two devices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A desktop I built myself, which runs Linux.&lt;/li&gt;
&lt;li&gt;A Samsung Tab S7+, on which I run OneNote.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This setup satisfies requirements 1, 2 and 3. But how do I satisfy requirement 4? It’s a combination of three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/coder/code-server" target="_blank" rel="noopener"
&gt;code-server&lt;/a&gt;, which lets you run Visual Studio Code in any browser.&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.samsung.com/us/apps/dex/" target="_blank" rel="noopener"
&gt;DeX mode&lt;/a&gt; on the Samsung tablet, although not technically required, gives me a traditional desktop environment. I also have the keyboard accessory.&lt;/li&gt;
&lt;li&gt;A bunch of networking configuration so I can reach my desktop from the internet. I only expose a single SSH port, and use SSH tunnels for anything else. (I use &lt;a class="link" href="https://www.duckdns.org/" target="_blank" rel="noopener"
&gt;duckdns&lt;/a&gt; and &lt;a class="link" href="https://juicessh.com/" target="_blank" rel="noopener"
&gt;JuiceSSH Pro&lt;/a&gt; to make it work).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This allows me to remotely connect with code-server (running on my desktop) through an SSH tunnel. In the end I’m able to work using the exact same editor as if I were on my desktop. This isn’t rocket science of course, it’s kinda like a home-built version of &lt;a class="link" href="https://github.com/features/codespaces" target="_blank" rel="noopener"
&gt;Github Codespaces&lt;/a&gt; where the server lives in your house.&lt;/p&gt;
&lt;p&gt;This is fine for “simple” development where you never leave your IDE or terminal. Web development is a little harder because you really want to debug your frontend using devtools. While forwarding the ports to &lt;a class="link" href="https://vitejs.dev/" target="_blank" rel="noopener"
&gt;vite&lt;/a&gt; (or whatever you want to use) is no problem, most browsers on Android assume you do all your debugging work remotely via USB or the network. The solution is &lt;a class="link" href="https://kiwibrowser.com/" target="_blank" rel="noopener"
&gt;Kiwi Browser&lt;/a&gt;, which has full devtools available.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion
&lt;/h1&gt;&lt;p&gt;I’ve been using this setup for more than 2 years now and I really like it. It’s not for everyone as it requires a little work to set up and maintain, but for me it combines the best of Android with the best of (Desktop) Linux leading to a very smooth experience.&lt;/p&gt;
&lt;p&gt;If you have any questions about this setup, feel free to &lt;a class="link" href="mailto:evertheylen@gmail.com" &gt;contact me&lt;/a&gt;!&lt;/p&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I once had an &lt;a class="link" href="https://support.hp.com/us-en/document/c06010885" target="_blank" rel="noopener"
&gt;HP ZBook Studio G5&lt;/a&gt;, which seemed like a powerful laptop with a nice large pen-supported touchscreen. One problem, Linux support was really sketchy. I really tried to make it work, even manually compiling chromium to include Wayland support. Even then I couldn’t find a good note-taking app. So I settled on Windows with WSL but just plain didn’t like it. Then one day I opened my laptop to a big advert for some XBox service and that settled it &amp;ndash; no more Windows.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item></channel></rss>